rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Regras para a coleção de produtos
    match /products/{productId} {
      // Permitir leitura para todos (produtos são públicos na loja)
      allow read: if true;
      
      // Permitir escrita apenas para usuários autenticados (administradores)
      allow write: if request.auth != null;
      
      // Validação dos dados do produto
      allow create: if request.auth != null 
        && validateProductData(request.resource.data);
      
      allow update: if request.auth != null 
        && validateProductData(request.resource.data);
      
      allow delete: if request.auth != null;
    }
    
    // Regras para a coleção de banners
    match /banners/{bannerId} {
      // Permitir leitura para todos (banners são públicos)
      allow read: if true;
      
      // Permitir escrita apenas para usuários autenticados (administradores)
      allow write: if request.auth != null;
      
      // Validação dos dados do banner
      allow create: if request.auth != null 
        && validateBannerData(request.resource.data);
      
      allow update: if request.auth != null 
        && validateBannerData(request.resource.data);
      
      allow delete: if request.auth != null;
    }
    
    match /customers/{customerId} {
      // Permitir leitura apenas para administradores
      allow read: if request.auth != null;
      
      allow create: if validateCustomerData(request.resource.data);
      allow update: if request.auth != null && validateCustomerData(request.resource.data);
      allow delete: if request.auth != null;
    }
    
    match /orders/{orderId} {
      // Permitir leitura para todos (necessário para busca de pedidos por email/telefone)
      allow read: if true;
      
      // Permitir criação de pedidos sem autenticação (checkout público)
      allow create: if validateOrderData(request.resource.data);
      
      // Apenas administradores podem atualizar e deletar pedidos
      allow update: if request.auth != null && validateOrderData(request.resource.data);
      allow delete: if request.auth != null;
    }
    
    // Função para validar dados do produto
    function validateProductData(data) {
      return data.keys().hasAll(['name', 'price', 'category', 'images']) &&
             data.name is string &&
             data.name.size() > 0 &&
             data.price is number &&
             data.price >= 0 &&
             data.category is string &&
             data.category.size() > 0 &&
             data.images is list &&
             data.images.size() > 0 &&
             data.images.size() <= 3 &&
             (!data.keys().hasAny(['description']) || data.description is string) &&
             (!data.keys().hasAny(['size']) || data.size is string) &&
             (!data.keys().hasAny(['brand']) || data.brand is string) &&
             (!data.keys().hasAny(['stock']) || (data.stock is number && data.stock >= 0)) &&
             (!data.keys().hasAny(['featured']) || data.featured is bool) &&
             (!data.keys().hasAny(['sold']) || data.sold is bool);
    }
    
    // Função para validar dados do banner
    function validateBannerData(data) {
      return data.keys().hasAll(['title', 'imageUrl', 'isActive', 'priority']) &&
             data.title is string &&
             data.title.size() > 0 &&
             data.imageUrl is string &&
             data.imageUrl.size() > 0 &&
             data.isActive is bool &&
             data.priority is number &&
             data.priority >= 1 &&
             data.priority <= 10 &&
             (!data.keys().hasAny(['description']) || data.description is string) &&
             (!data.keys().hasAny(['linkUrl']) || data.linkUrl is string) &&
             (!data.keys().hasAny(['startDate']) || data.startDate is string) &&
             (!data.keys().hasAny(['endDate']) || data.endDate is string) &&
             (!data.keys().hasAny(['backgroundColor']) || data.backgroundColor is string) &&
             (!data.keys().hasAny(['textColor']) || data.textColor is string) &&
             (!data.keys().hasAny(['createdAt']) || data.createdAt is timestamp);
    }
    
    function validateCustomerData(data) {
      return data.keys().hasAll(['name', 'phone', 'email', 'address', 'totalOrders', 'totalSpent', 'createdAt', 'updatedAt']) &&
             data.name is string &&
             data.name.size() > 0 &&
             data.phone is string &&
             data.phone.size() > 0 &&
             data.email is string &&
             data.email.size() > 0 &&
             data.email.matches('.*@.*\\..*') && // Validação básica de email
             data.address is string &&
             data.address.size() > 0 &&
             data.totalOrders is number &&
             data.totalOrders >= 0 &&
             data.totalSpent is number &&
             data.totalSpent >= 0 &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp &&
             (!data.keys().hasAny(['lastOrderId']) || data.lastOrderId is string) &&
             (!data.keys().hasAny(['lastOrderDate']) || data.lastOrderDate is timestamp);
    }
    
    function validateOrderData(data) {
      return data.keys().hasAll(['customerInfo', 'items', 'total', 'status', 'createdAt', 'updatedAt']) &&
             data.customerInfo is map &&
             data.customerInfo.keys().hasAll(['name', 'phone', 'email', 'address']) &&
             data.customerInfo.name is string &&
             data.customerInfo.name.size() > 0 &&
             data.customerInfo.phone is string &&
             data.customerInfo.phone.size() > 0 &&
             data.customerInfo.email is string &&
             data.customerInfo.email.size() > 0 &&
             data.customerInfo.email.matches('.*@.*\\..*') && // Validação básica de email
             data.customerInfo.address is string &&
             data.customerInfo.address.size() > 0 &&
             data.items is list &&
             data.items.size() > 0 &&
             data.total is number &&
             data.total > 0 &&
             data.status is string &&
             data.status in ['pending', 'confirmed', 'shipped', 'delivered', 'cancelled'] &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp &&
             (!data.keys().hasAny(['notes']) || data.notes is string);
    }
  }
}
